 1 创建springBoot项目 添加上支持

 2 pom.xml(配置  msyql  jpa  redis web devtools bootstarter)

 3  添加上插件（bomlok  git   maven ）

 4 git远程仓库配置（创建远程仓库，创建团队，加入项目中，开启提交权限）


 5 远程数据库配置 （反向生成实体， 正向生成表结构，）  ddl-auto: update  #修改  create 创建   JSON

application.properties
spring.datasource.url=jdbc:mysql://teacherzhu.uicp.net:34626/jja1804?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
spring.datasource.username=jja1804
spring.datasource.password=jja1804
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.jpa.properties.hibernate.hbm2ddl.auto=update
----------------------------------------------------------------------------------------------------
 application.yml
 spring:
   profiles:
     active: product
   datasource:
     driver-class-name: com.mysql.cj.jdbc.Driver
     url: jdbc:mysql://teacherzhu.uicp.net:34626/jja1804?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
     username: jja1804
     password: jja1804
   jpa:
     hibernate:
       ddl-auto: update  #修改  create 创建
     show-sql: true
   jackson:
     date-format: yyyy-MM-dd HH:mm:ss
     time-zone: UTC
 naming:
   implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl
   physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
  properties:
    hibernate.dialect: com.jane.utils.MySQL5DialectUTF8


   6  实体类配置
       @Entity
       @Table(name = "dog")
       @Data // get/set/toString
       public class Dog {

         @Id
         @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键
         private Integer dogId;
         @Column
         private String dogName;
         @Column
         private String  dogHobby;
         @Column
         private Integer  dogAge;

7  repository   数据仓库DAO

import javax.transaction.Transactional;
@Repository
public interface DogRepository  extends JpaRepository<Dog,Integer> {
    //CURD
    @javax.transaction.Transactional
    @Modifying(clearAutomatically = true) //    代码提示ctrl+p
    @Query(" update Dog set dogHobby=?2 where dogId=?1") // :dogHobby
    int  update(Integer dogId,String dogHobby);


8 测试类

 @RunWith(SpringRunner.class)
 @SpringBootTest
 @Log4j2
 @slf2j


9 分页
       @Test
        public void testPage(){
         //import org.springframework.data.domain.Sort;
               Sort sort=new Sort(Sort.Direction.ASC,"dogId");//属性名dogid XXX
               //Sort sort=new Sort(Sort.Direction.DESC,"dogId");
                Integer pageNum=3; //  2   3页
                Integer size=5;

            PageRequest pageable = new PageRequest(pageNum-1, size,new Sort(Sort.Direction.ASC,"dogId")); //根据start、size、sort创建分页对象
            //Pageable pageable = new PageRequest(pageNum-1, size,sort); //根据start、size、sort创建分页对象

            Page<Dog> page = dogRepository.findAll(pageable);
            List<Dog> dogList = page.getContent();

            for (int i = 0; i < dogList.size(); i++) {

                Dog dog = dogList.get(i);
                log.info(dog.toString());
            }

        }

10 项目数据库设计 （完善中...）
       domain包下有两个项目：
           在线网店（，水果，宠物）

           SMBMS 供应商系统
表分析：
     Guanggao  广告表
团队表：
      Team  团队
       Member  开发者
在线网店
OrderDetail   定单明细表
OrderMaster  写单主表
ProductCategory  分类
ProductInfo  产品
UserInfo  用户表
供应商系统：
 SmbmsAddress     供应商地址
SmbmsBill         定单    5
SmbmsProvider    供应商
SmbmsRole     角色表
SmbmsUser     用户表


11 数据层接口， 业务层接口和实现, 编写测试类文件





12  开发者和开发团队


13添加后台bootstrap页面

14 绑定项目功能 ，返回JSON













